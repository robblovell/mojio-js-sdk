{
  "version": 3,
  "file": "MojioPushSDK.js",
  "sourceRoot": "",
  "sources": [
    "MojioPushSDK.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,YAAA,EAAA;;EAEA,YAAA,GAAe,OAAA,CAAQ,gBAAR,EAFf;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BA,MAAM,CAAC,OAAP,GAAuB;;;IAAN,MAAA,aAAA,QAA2B,aAA3B,CAAA;;;;;;MAYb,WAAa,CAAC,UAAQ,CAAA,CAAT,EAAa,aAAW,gBAAxB,CAAA;AACT,YAAA,QAAA,EAAA;aAAA,CAAM,OAAN;QACA,KAAA,sBAAA;;UACI,IAAE,CAAA,QAAA,CAAF,GAAc;QADlB;MAFS,CAXb;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCA,OAAS,CAAC,GAAD,CAAA;AACL,eAAO;MADF,CAvCT;;;;;;;;;;;;;;;;;;;;;;;;MAgEA,MAAQ,CAAC,MAAD,CAAA;AACJ,eAAO;MADH,CAhER;;;;;;;;;;;;;;MA+EA,KAAO,CAAC,MAAD,CAAA;AACH,eAAO;MADJ,CA/EP;;;;;;;;;;;;;;;;;;MAkGA,SAAW,CAAC,SAAD,CAAA;AACP,eAAO;MADA,CAlGX;;;;;;;;;;;MA8GA,QAAU,CAAC,QAAD,CAAA;AACN,eAAO;MADD,CA9GV;;;;;;;;;;;;;;;;MA+HA,QAAU,CAAC,QAAD,CAAA;AACN,eAAO;MADD,CA/HV;;;;;;;;;;;;;;;;;;;;;;;;MAwJA,MAAQ,CAAC,KAAD,CAAA;AACJ,eAAO;MADH;;IAzJK;;IACb,QAAA,GAAW;MACP,OAAA,EAAS;IADF;;IAGX,UAAA,GAAa;MAAE,OAAA,EAAS,CAAA,CAAX;MAAe,QAAA,EAAU,CAAA;IAAzB;;IAEb,gBAAA,GAAmB,UAAU,CAAC;;;;;AApClC",
  "sourcesContent": [
    "# version 4.0.0\n\nMojioRestSDK = require './MojioRestSDK'\n# The Push segment of the Mojio SDK. The Push segement of the SDK provides a mechanism for applications to subscribe\n# to changes occurring on primary API resources of Vehicles, Users, Mojios, Trips, Groups, and Apps.\n#\n# Mojio maintains a separate \"Push\" style API where applications can subscribe to changes on resources and receive those\n# changes across multiple transports.  Current transports include: SIGNALR, HTTPS POST, and MQTT.\n#\n# Subscriptions are instantiated by posting \"Observers\" to the Push API's REST interface.  Observers define what, when\n# and how data is channeled to the application from the server.\n#\n# What is defined by specification of the resource type and id.\n# The \"What\" delivered can be narrowed down to a specific set of fields through a filter specification (basically a list of the names of the fields).\n#\n# The \"When\" is defined by optional conditions, debounce, throttle, and timings.\n#\n# The \"How\" is defined by a transport specification\n# that has the connection details to a method, server or hub, depending on the transport type.  For SignalR, Mojio provides\n# the hub of communication, for other protocols like MQTT or Http Post, the application writer is responsible for the\n# communication infrastructure.\n#\n#\n# The inheritance path is:\n#    MojioPushSDK->MojioRestSDK->MojioAuthSDK->MojioModelSDK\n#\n#\n# @example\n#   mojioSdk = new MojioSDK({sdk: MojioPushSDK}) # instantiate the mojioSDK to all available API calls.\n#\nmodule.exports = class MojioPushSDK extends MojioRestSDK\n    defaults = {\n        pushURL: 'push.moj.io'\n    }\n    transports = { signalr: {}, httpPost: {}}\n\n    defaultTransport = transports.signalr\n    # Instantiate the Mojio Push SDK.\n    #\n    # @param {object} options\n    # @return {object} this\n    # @nodoc\n    constructor: (options={}, transports=defaultTransport) ->\n        super(options)\n        for property, value of transports\n            @[property] = value\n#        _.extend(@, transports)\n\n    # Observe a Vehicle, Mojio, or User object in the Mojio API.\n    #\n    # Observers on particular objects are setup by chaining them with calls to the RestSDK's entity methods: Vehicle, Vehicles, User, Users, Mojio, or Mojios.\n    # The observer will observe the entities specified in those calls.\n    # @param {string} key This parameter is a name that can be used to find the observer later, or to modify it.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed.\n    # @example observe all vehicles for this user, assumes SignalR transport and the callback given is the handler.\n    #   sdk.observe(\"MyUniqueKeyName\")\n    #   .vehicles() # observe all vehicles for the account of the authorized token\n    #   .callback((error, result) ->\n    #        if (typeof result is 'boolean') # this is a callback via nodejs return\n    #            console.log(\"Vehicle Observer created with signalR transport and this callback as the handler\")\n    #        else if (result instanceof 'object') # we are in a callback via signalR\n    #            ... # receive the changes to the objects.\n    #    )\n    # @example\n    #   sdk.observe(\"MyUniqueKeyName\")\n    #    .vehicle(\"[some id]\") # observe all vehicles for a specific vehicle\n    #    .callback((error, result) ->\n    #       console.log(\"success in creating an observer\") if (result?)\n    #    )\n    # @return {object} this\n    observe: (key) ->\n        return @\n\n    # Limit the fields returned to a specific set of properties.\n    #\n    # Fields are given as an array of strings that are the names of the properties of the entity returned.\n    # @param {array of strings} fields The fields of an object to deliver in the results of a query.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed.\n    # @example\n    #   sdk.observe({key: \"MyUniqueKeyName\"})\n    #   .vehicles()\n    #   .fields(\n    #           \"VIN\",\n    #           \"AccidentState\",\n    #           \"Battery\",\n    #           \"Location\",\n    #           \"Heading\",\n    #           \"Altitude\",\n    #           \"Speed\",\n    #           \"Accelerometer\",\n    #           \"LastContactTime\",\n    #           \"GatewayTimeStamp\",\n    #           \"FuelLevel\"\n    #       ])\n    # @return {object} this\n    fields: (fields) ->\n        return @\n\n    # The condition that must be satisfied for the observer to fire.\n    #\n    # When the condition fires, the observer sends data. For instance, if the observer is setup\n    # with the condition send data when MilStatus is true, it will fire when the MilStatus field on the vehicle\n    # changes from false to true. See \"timing\" below to change the time when the data is sent.\n    # @param {string} clause A where clause for queries.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed. \n    # @return {object} this\n    # @example Send only when the battery level transitions is in this condition\n    #   sdk.observe({key: \"MyUniqueKeyName\"})\n    #   .vehicles()\n    #   .where(\"Battery > min or Battery < max\")\n    where: (clause) ->\n        return @\n\n    # Specify how data is sent.\n    #\n    # Specify the transport used to send data. Possible transports are numerous and include: SignalR, Http Post, MQTT, etc.\n    # @param {object} transport An object that contains the information about how the entity will be delivered, eg http post, signalr etc.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed. \n    # @return {object} this\n    # @example Use SignalR as a transport with the given callback:\n    #   # coffeescript\n    #   sdk.observe({key: \"MyUniqueKeyName\"})\n    #   .vehicles()\n    #   .transport({\n    #       Type: \"SignalR\",\n    #       Callback: (error, result) -> # function to call when the condition fires.\n    #           console.log(\"Error:\"+ JSON.stringify(error)) if error\n    #          console.log(JSON.stringify(result)) if result\n    #   })\n    transport: (transport) ->\n        return @\n\n    # Limit how much data is sent.\n    #\n    # Throttle back the data sent by telling the push API to send data at a limited rate. The rate is limited by\n    # specifying a window of time to refrain from sending data after the observer has fired.\n    # @param {object} throttle An object that defines how often to send data.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed. \n    # @return {object} this\n    # @example Don't send data faster than 10 seconds, in other words, once data is sent, don't send anything again until 10 seconds have past.\n    #   throttle(\"10 seconds\")\n    throttle: (throttle) ->\n        return @\n\n    # Debounce the condtion for the obserer.\n    #\n    # Prevent false positives by making sure that the condition has fired by specifying either the number of\n    # readings required for a condition to be considered true, or specifying the amount of time the condition must\n    # be true in order to be sure of the change.\n    # @param {object} debounce An object that defines how to smooth out detection of transitions of state.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed. \n    # @return {object} this\n    # @example Set the observer so that it detects a transition if 6 true data points show the change.\n    #   debounce({ DataPoints: 6 })\n    # @example Set the observer so that it detects a transition if the change has been active for 15 seconds.\n    #   debounce({ TimeWindow: \"00:00:15\" }) # time window is given in a csharp timespan format\n    # @example Set the observer so that it detects a transition there are 6 true datapoints within 15 seconds.\n    #   debounce({ DataPoints: 6, TimeWindow: \"00:00:15\" }) # time window is given in a csharp timespan format\n    debounce: (debounce) ->\n        return @\n\n    # Set the timing of the observer. Timing refers to when to send data in relation to the given condition.\n    # Possible timings are: leading, trailing, high, low, edge, and continuous.\n    #\n    # leading- deliver data when the condition transitions from false to true.\n    #\n    # trailing- deliver the data when the condition transitions from true to false\n    #\n    # high- deliver the data when the condition is true and information comes from the vehicle (subject to throttle)\n    #\n    # low- deliver the data when the condition is false and information comes from the vehicle (subject to throttle)\n    #\n    # edge- both leading and trailing edges\n    #\n    # continuous- both high and low\n    #\n    # @param {string} states An object that defines how to smooth out detection of transitions of state.\n    # @param {function} callback Optional parameter to initiate the fluent chain if needed.\n    # @return {object} this\n    # @example Set the observer so that it detects a transition if 6 data points show the change.\n    #   timing(\"high\")\n    # @example Set the observer so that it detects a transition if the change has been active for 15 seconds.\n    #   timing(\"leading\")\n    timing: (state) ->\n        return @\n\n\n"
  ]
}