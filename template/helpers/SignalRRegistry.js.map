{
  "version": 3,
  "file": "SignalRRegistry.js",
  "sourceRoot": "",
  "sources": [
    "SignalRRegistry.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA;;EACA,MAAM,CAAC,OAAP,GAAuB;IAAN,MAAA,gBAAA;MAGb,WAAa,CAAA,CAAA;YAIb,CAAA,wBAAA,CAAA,6BAFI;;QAAA,IAAC,CAAA,IAAD,GAAQ,CAAA;MAFC;;MAIb,iBAAmB,CAAC,MAAD,CAAA;AAGf,YAAA,QAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA;;;QAAA,IAAG,IAAC,CAAA,kBAAmB,CAAA,MAAM,CAAC,GAAP,CAAvB;AACI;AAAA;UAAA,KAAA,qCAAA;;yBAAA,QAAA,CAAS,MAAT;UAAA,CAAA;yBADJ;SAAA,MAEK,IAAG,IAAC,CAAA,kBAAmB,CAAA,MAAM,CAAC,IAAP,CAAvB;AACD;AAAA;UAAA,KAAA,wCAAA;;0BAAA,QAAA,CAAS,MAAT;UAAA,CAAA;0BADC;;MALU;;MAQnB,WAAa,CAAC,EAAD,EAAK,cAAL,CAAA;QACT,IAAK,mCAAL;UACI,IAAC,CAAA,kBAAmB,CAAA,EAAA,CAApB,GAA0B,GAD9B;;QAEA,IAAC,CAAA,kBAAmB,CAAA,EAAA,CAAG,CAAC,IAAxB,CAA6B,cAA7B;MAHS;;MAMb,cAAgB,CAAC,EAAD,EAAK,YAAL,CAAA;AACZ,YAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAA,IAAI,YAAA,KAAgB,IAApB;UACI,IAAC,CAAA,kBAAmB,CAAA,EAAA,CAApB,GAA0B,GAD9B;SAAA,MAAA;UAGI,IAAA,GAAO;AAEP;;UAAA,KAAA,qCAAA;;YACI,IAAwB,QAAA,KAAY,YAApC;cAAA,IAAI,CAAC,IAAL,CAAU,QAAV,EAAA;;UADJ;UAEA,IAAC,CAAA,kBAAmB,CAAA,EAAA,CAApB,GAA0B,KAP9B;;MADY;;IArBH;;8BACb,kBAAA,GAAqB,CAAA;;;;;AAFzB",
  "sourcesContent": [
    "# @nodoc\nmodule.exports = class SignalRRegistry\n    observer_callbacks:  {}\n\n    constructor: () ->\n#        super()\n        @hubs = {}\n\n    observer_registry: (entity) =>\n        # need to have the observer id to look this up here.\n        # could use the entity type\n        if @observer_callbacks[entity._id]\n            callback(entity) for callback in @observer_callbacks[entity._id]\n        else if @observer_callbacks[entity.Type]\n            callback(entity) for callback in @observer_callbacks[entity.Type]\n\n    setCallback: (id, futureCallback) ->\n        if (!@observer_callbacks[id]?)\n            @observer_callbacks[id] = []\n        @observer_callbacks[id].push(futureCallback)\n        return\n\n    removeCallback: (id, pastCallback) ->\n        if (pastCallback == null)\n            @observer_callbacks[id] = []\n        else\n            temp = []\n            # reform the obxerver_callbacks list without the given pastCallback\n            for callback in @observer_callbacks[id]\n                temp.push(callback) if (callback != pastCallback)\n            @observer_callbacks[id] = temp\n        return\n"
  ]
}