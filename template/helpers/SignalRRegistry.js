// Generated by CoffeeScript 2.0.2
(function() {
  // @nodoc
  var SignalRRegistry;

  module.exports = SignalRRegistry = (function() {
    class SignalRRegistry {
      constructor() {
        this.observer_registry = this.observer_registry.bind(this);
        //        super()
        this.hubs = {};
      }

      observer_registry(entity) {
        var callback, i, j, len, len1, ref, ref1, results, results1;
        // need to have the observer id to look this up here.
        // could use the entity type
        if (this.observer_callbacks[entity._id]) {
          ref = this.observer_callbacks[entity._id];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            callback = ref[i];
            results.push(callback(entity));
          }
          return results;
        } else if (this.observer_callbacks[entity.Type]) {
          ref1 = this.observer_callbacks[entity.Type];
          results1 = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            callback = ref1[j];
            results1.push(callback(entity));
          }
          return results1;
        }
      }

      setCallback(id, futureCallback) {
        if (this.observer_callbacks[id] == null) {
          this.observer_callbacks[id] = [];
        }
        this.observer_callbacks[id].push(futureCallback);
      }

      removeCallback(id, pastCallback) {
        var callback, i, len, ref, temp;
        if (pastCallback === null) {
          this.observer_callbacks[id] = [];
        } else {
          temp = [];
          ref = this.observer_callbacks[id];
          // reform the obxerver_callbacks list without the given pastCallback
          for (i = 0, len = ref.length; i < len; i++) {
            callback = ref[i];
            if (callback !== pastCallback) {
              temp.push(callback);
            }
          }
          this.observer_callbacks[id] = temp;
        }
      }

    };

    SignalRRegistry.prototype.observer_callbacks = {};

    return SignalRRegistry;

  })();

}).call(this);

//# sourceMappingURL=SignalRRegistry.js.map
