{
  "version": 3,
  "file": "SignalRWrapper.js",
  "sourceRoot": "",
  "sources": [
    "SignalRWrapper.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# assume's JQuery javascript client (bower install jquery).\r\niSignalRWrapper = require './iSignalRWrapper'\r\nSignalRRegistry = require './SignalRRegistry'\r\nmodule.exports = class SignalRBrowserWrapper extends iSignalRWrapper\r\n    registry = new SignalRRegistry()\r\n\r\n    constructor: (@url, @hubNames, jquery) ->  # hubNames not used.\r\n        super()\r\n        @$ = jquery\r\n        @available_hubs = hubNames\r\n        @signalr = null\r\n        @connectionStatus = false\r\n\r\n    getHub: (which, callback) ->\r\n        if (registry.hubs[which])\r\n            callback(null, registry.hubs[which])\r\n        else\r\n            if (!@signalr?)\r\n                @signalr = @$.hubConnection(@url, { useDefaultPath: false })\r\n                @signalr.error( (error) ->\r\n                    console.log(\"Connection error\"+error)\r\n                    callback(error, null)\r\n                )\r\n\r\n            registry.hubs[which] = @signalr.createHubProxy(which)\r\n            hub = registry.hubs[which]\r\n\r\n            hub.on(\"error\", (data) ->\r\n                console.log(\"Hub '\"+which+\"' has error\"+data)\r\n            )\r\n            hub.on(\"UpdateEntity\", registry.observer_registry)\r\n\r\n            if (hub.connection.stateMachine != 1)\r\n                if (!@connectionStatus)\r\n                    @signalr.start().done( () =>\r\n                        @connectionStatus = true\r\n                        hub.connection.start().done( () =>\r\n                            callback(null, hub)\r\n                        )\r\n                    )\r\n                else\r\n                    hub.connection.start().done( () =>\r\n                        callback(null, hub)\r\n                    )\r\n            else\r\n                callback(null, hub)\r\n\r\n    subscribe: (hubName, method, observerId, subject, futureCallback, callback) ->\r\n        registry.setCallback(subject, futureCallback)\r\n        @getHub(hubName, (error, hub) ->\r\n            if error?\r\n                callback(error, null)\r\n            else\r\n                hub.invoke(method, observerId) if hub?\r\n                callback(null, hub)\r\n        )\r\n\r\n    unsubscribe: (hubName, method, observerId, subject, pastCallback, callback) ->\r\n        registry.removeCallback(subject, pastCallback)\r\n        if (registry.observer_callbacks[subject].length == 0)\r\n            @getHub(hubName, (error, hub) ->\r\n                if error?\r\n                    callback(error, null)\r\n                else\r\n                    hub.invoke(method, observerId) if hub?\r\n                    callback(null, hub)\r\n            )\r\n        else\r\n            callback(null, true)\r\n"
  ]
}