// Generated by CoffeeScript 2.0.2
(function() {
  var SignalR, SignalRNodeWrapper;

  SignalR = require('signalr-client');

  // @nodoc
  module.exports = SignalRNodeWrapper = (function() {
    class SignalRNodeWrapper {
      observer_registry(entity) {
        var callback, i, j, len, len1, ref, ref1, results, results1;
        // need to have the observer id to look this up here.
        // could use the entity type
        if (this.observer_callbacks[entity._id]) {
          ref = this.observer_callbacks[entity._id];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            callback = ref[i];
            results.push(callback(entity));
          }
          return results;
        } else if (this.observer_callbacks[entity.Type]) {
          ref1 = this.observer_callbacks[entity.Type];
          results1 = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            callback = ref1[j];
            results1.push(callback(entity));
          }
          return results1;
        }
      }

      constructor(url, hubNames, jquery = null) {
        this.observer_registry = this.observer_registry.bind(this);
        this.url = url;
        this.hubs = {};
        this.available_hubs = hubNames;
      }

      getHub(which, callback, retries = 10) {
        var _this, retry;
        if (this.signalr == null) {
          this.signalr = new SignalR.client(this.url, this.available_hubs, null);
        }
        if (this.hubs[which] != null) {
          return callback(null, this.hubs[which]);
        }
        if (this.hubs[which] = this.signalr.hub(which)) {
          this.hubs[which].on('error', function(data) {
            return log(data);
          });
          this.hubs[which].on('UpdateEntity', this.observer_registry);
          return callback(null, this.hubs[which]);
        } else if (retries-- > 0) {
          _this = this;
          retry = function() {
            return _this.getHub(which, callback, retries);
          };
          return setTimeout(retry, 1000);
        } else {
          return callback("Timed out.", null);
        }
      }

      
      // TODO:: move callback list maintenance to separate class.
      setCallback(id, futureCallback) {
        if (this.observer_callbacks[id] == null) {
          this.observer_callbacks[id] = [];
        }
        this.observer_callbacks[id].push(futureCallback);
      }

      removeCallback(id, pastCallback) {
        var callback, i, len, ref, temp;
        if (pastCallback === null) {
          this.observer_callbacks[id] = [];
        } else {
          temp = [];
          ref = this.observer_callbacks[id];
          // reform the obxerver_callbacks list without the given pastCallback
          for (i = 0, len = ref.length; i < len; i++) {
            callback = ref[i];
            if (callback !== pastCallback) {
              temp.push(callback);
            }
          }
          this.observer_callbacks[id] = temp;
        }
      }

      subscribe(hubName, method, observerId, subject, futureCallback, callback) {
        this.setCallback(subject, futureCallback);
        return this.getHub(hubName, function(error, hub) {
          if (error != null) {
            return callback(error, null);
          } else {
            if (hub != null) {
              hub.invoke(method, observerId);
            }
            return callback(null, hub);
          }
        });
      }

      unsubscribe(hubName, method, observerId, subject, pastCallback, callback) {
        this.removeCallback(subject, pastCallback);
        if (this.observer_callbacks[subject].length === 0) {
          return this.getHub(hubName, function(error, hub) {
            if (error != null) {
              return callback(error, null);
            } else {
              if (hub != null) {
                hub.invoke(method, observerId);
              }
              return callback(null, hub);
            }
          });
        } else {
          return callback(null, true);
        }
      }

    };

    SignalRNodeWrapper.prototype.observer_callbacks = {};

    return SignalRNodeWrapper;

  })();

}).call(this);
