// Generated by CoffeeScript 2.0.2
(function() {
  // version 3.5.2
  var FormUrlencoded, Http, MojioClient, SignalR;

  Http = require('./HttpNodeWrapper');

  SignalR = require('./SignalRNodeWrapper');

  FormUrlencoded = require('form-urlencoded');

  module.exports = MojioClient = (function() {
    var App, Event, Login, Mojio, Observer, Product, Subscription, Trip, User, Vehicle, defaults, mojio_models;

    class MojioClient {
      constructor(options) {
        var base, base1, base2, base3, base4, base5, base6, base7, base8, base9;
        this.options = options;
        if (this.options == null) {
          this.options = {
            hostname: this.defaults.hostname,
            port: this.defaults.port,
            version: this.defaults.version,
            scheme: this.defaults.scheme,
            live: this.defaults.live
          };
        }
        if ((base = this.options).hostname == null) {
          base.hostname = defaults.hostname;
        }
        if ((base1 = this.options).authUrl == null) {
          base1.authUrl = defaults.authUrl;
        }
        if ((base2 = this.options).port == null) {
          base2.port = defaults.port;
        }
        if ((base3 = this.options).version == null) {
          base3.version = defaults.version;
        }
        if ((base4 = this.options).scheme == null) {
          base4.scheme = defaults.scheme;
        }
        if ((base5 = this.options).signalr_port == null) {
          base5.signalr_port = defaults.signalr_port;
        }
        if ((base6 = this.options).signalr_scheme == null) {
          base6.signalr_scheme = defaults.signalr_scheme;
        }
        if ((base7 = this.options).signalr_hub == null) {
          base7.signalr_hub = defaults.signalr_hub;
        }
        this.options.observerTransport = 'SingalR';
        this.conn = null;
        this.hub = null;
        this.connStatus = null;
        this.setToken(null);
        if ((base8 = this.options).tokenRequester == null) {
          base8.tokenRequester = this.getTokenId();
        }
        if ((base9 = this.options).tokenRequesterImplicit == null) {
          base9.tokenRequesterImplicit = (function() {
            return null;
          });
        }
        this.signalr = new SignalR(this.options.signalr_scheme + "://" + this.options.hostname + ":" + this.options.signalr_port + "/v1/signalr", [this.options.signalr_hub]);
      }

      /*
      Helpers
      */
      getResults(type, results) {
        var arrlength, i, j, len, len1, objects, ref, result;
        objects = [];
        if (results instanceof Array) {
          arrlength = results.length;
          for (i = 0, len = results.length; i < len; i++) {
            result = results[i];
            objects.push(new type(result));
          }
        } else if (results.Data instanceof Array) {
          arrlength = results.Data.length;
          ref = results.Data;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            result = ref[j];
            objects.push(new type(result));
          }
        } else if (result.Data !== null) {
          objects.push(new type(result.Data));
        } else {
          objects.push(new type(result));
        }
        return objects;
      }

      static _makeParameters(params) {
        var property, query, value;
        if (params.length === 0) {
          '';
        }
        query = '?';
        for (property in params) {
          value = params[property];
          query += `${encodeURIComponent(property)}=${encodeURIComponent(value)}&`;
        }
        return query.slice(0, -1);
      }

      getPath(resource, id, action, key) {
        if (key && id && action && id !== '' && action !== '') {
          return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action) + "/" + encodeURIComponent(key);
        } else if (id && action && id !== '' && action !== '') {
          return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id) + "/" + encodeURIComponent(action);
        } else if (id && id !== '') {
          return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(id);
        } else if (action && action !== '') {
          return "/" + encodeURIComponent(resource) + "/" + encodeURIComponent(action);
        }
        return "/" + encodeURIComponent(resource);
      }

      dataByMethod(data, method) {
        switch (method.toUpperCase()) {
          case 'POST' || 'PUT':
            return this.stringify(data);
          default:
            return data;
        }
      }

      stringify(data) {
        return JSON.stringify(data);
      }

      request(request, callback, isOauth = false) {
        var http, parts;
        if (isOauth === null) {
          isOauth = false;
        }
        parts = {
          hostname: this.options.hostname,
          port: this.options.port,
          scheme: this.options.scheme,
          path: (isOauth ? '' : '/' + this.options.version),
          method: request.method,
          withCredentials: false
        };
        if (isOauth) {
          parts.hostname = this.options.authUrl;
        }
        parts.host = parts.hostbame;
        parts.path = parts.path + this.getPath(request.resource, request.id, request.action, request.key);
        if ((request.parameters != null) && Object.keys(request.parameters).length > 0) {
          parts.path += MojioClient._makeParameters(request.parameters);
        }
        parts.headers = {};
        if (this.getTokenId() != null) {
          parts.headers["MojioAPIToken"] = this.getTokenId();
        }
        if ((request.headers != null)) {
          parts.headers += request.headers;
        }
        //parts.headers["Access-Control-Allow-Credentials"] = 'true'
        parts.headers["Content-Type"] = 'application/json';
        if ((request.body != null)) {
          if (isOauth) {
            parts.body = FormUrlencoded.encode(request.body);
          } else {
            parts.body = request.body;
          }
        }
        http = new Http();
        return http.request(parts, callback);
      }

      authorize(redirect_url, type = "token", scope = 'full', state = null, callback) {
        var http, parts;
        this.auth_response_type = type;
        if ((this.options != null) && (this.options.secret != null) && (this.options.username != null) && (this.options.password != null)) {
          return this._login(this.options.username, this.options.password, callback);
        } else {
          parts = {
            hostname: this.options.authUrl,
            port: this.options.port,
            scheme: this.options.scheme,
            path: this.options.live ? '/OAuth2/authorize' : '/OAuth2Sandbox/authorize',
            method: 'Get',
            withCredentials: false
          };
          parts.path += "?response_type=" + type;
          parts.path += "&client_id=" + this.options.application;
          parts.path += "&redirect_uri=" + redirect_url;
          if (scope) {
            parts.path += "&scope=" + scope;
          }
          if (state) {
            parts.path += "&state=" + state;
          }
          parts.headers = {};
          if (this.getTokenId() != null) {
            parts.headers["MojioAPIToken"] = this.getTokenId();
          }
          parts.headers["Content-Type"] = 'application/json';
          // url = parts.scheme+"://"+parts.host+":"+parts.port+parts.path
          http = new Http();
          return http.redirect(parts, function(error, result) {
            this.setToken(result);
            if (callback == null) {
              return;
            }
            if (error != null) {
              callback(error, null);
            }
            return callback(null, result);
          });
        }
      }

      token(callback) {
        var match, match1, match2, token1, token2;
        this.user = null;
        token1 = this.options.tokenRequester();
        match1 = !!token1 && token1[1];
        token2 = this.options.tokenRequesterImplicit();
        match2 = !!token2 && token2[1];
        match = match1 || match2;
        if (!match) {
          return callback("token for authorization not found.", null);
        } else if (this.auth_response_type === "token" || this.auth_response_type === "password") {
          this.setToken(match);
          return callback(null, match);
        } else {
          // get the user id by requesting login information, then set the auth_token:
          return this.request({
            method: 'GET',
            resource: this.login_resource,
            id: match
          }, (error, result) => {
            if (error) {
              return callback(error, null);
            } else {
              this.setToken(result);
              return callback(null, this.getToken());
            }
          });
        }
      }

      unauthorize(callback) {
        if ((this.options != null) && (this.options.secret != null) && (this.options.username != null) && (this.options.password != null)) {
          return this._logout(callback);
        } else if ((this.options != null) && (this.options.secret != null) && (this.options.application != null)) {
          return this._logout(callback);
        } else {
          this.setToken(null);
          return callback(null, "ok");
        }
      }

      _login(username, password, callback) { // Use if you want the raw result of the call.
        return this.request({
          method: 'POST',
          resource: this.options.live ? '/OAuth2/token' : '/OAuth2Sandbox/token',
          body: {
            username: username,
            password: password,
            client_id: this.options.application,
            client_secret: this.options.secret,
            grant_type: 'password'
          }
        }, (error, result) => {
          this.setToken(result);
          return callback(error, result);
        }, true);
      }

      // Login
      login(username, password, callback) {
        return this._login(username, password, (error, result) => {
          this.setToken(result);
          return callback(error, result);
        });
      }

      _logout(callback) {
        return this.request({
          method: 'DELETE',
          resource: this.login_resource,
          id: typeof mojio_token !== "undefined" && mojio_token !== null ? mojio_token : this.getTokenId()
        }, (error, result) => {
          this.setToken(null);
          return callback(error, result);
        });
      }

      // Logout
      logout(callback) {
        return this._logout((error, result) => {
          this.setToken(null);
          return callback(error, result);
        });
      }

      // Make an app from a result
      model(type, json = null) {
        var data, i, len, object, ref;
        if (json === null) {
          return mojio_models[type];
        } else if ((json.Data != null) && json.Data instanceof Array) {
          object = json;
          object.Objects = new Array();
          ref = json.Data;
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            object.Objects.push(new mojio_models[type](data));
          }
        } else if ((json.Data != null)) {
          object = new mojio_models[type](json.Data);
        } else {
          object = new mojio_models[type](json);
        }
        object._client = this;
        return object;
      }

      // Model CRUD
      // query(model, { criteria={ }, limit=10, offset=0, sortby="name", desc=false }, callback) # take parameters as parameters.
      // query(model, { criteria={ name="blah", field="blah" }, limit=10, offset=0, sortby="name", desc=false }, callback) # take parameters as parameters.
      // query(model, { criteria="name=blah; field=blah", limit=10, offset=0, sortby="name", desc=false }, callback)
      // query(model, { limit=10, offset=0, sortby="name", desc=false }, callback)
      query(model, parameters, callback) {
        var property, query_criteria, ref, value;
        if (parameters instanceof Object) {
          // convert criteria to a semicolon separated list of property values if it's an object.
          if (parameters.criteria instanceof Object) { // if the list contain "Criteria" as an object
            // convert to semicolon separated list.
            query_criteria = "";
            ref = parameters.criteria;
            for (property in ref) {
              value = ref[property];
              query_criteria += `${property}=${value};`;
            }
            parameters.criteria = query_criteria;
          }
          return this.request({
            method: 'GET',
            resource: model.resource(),
            parameters: parameters
          }, (error, result) => {
            return callback(error, this.model(model.model(), result));
          });
        } else if (typeof parameters === "string") { // instanceof only works for coffeescript classes.
          return this.request({
            method: 'GET',
            resource: model.resource(),
            parameters: {
              id: parameters
            }
          }, (error, result) => {
            return callback(error, this.model(model.model(), result));
          });
        } else {
          return callback("criteria given is not in understood format, string or object.", null);
        }
      }

      get(model, criteria, callback) {
        return this.query(model, criteria, callback);
      }

      save(model, callback) {
        return this.request({
          method: 'PUT',
          resource: model.resource(),
          body: model.stringify(),
          parameters: {
            id: model._id
          }
        }, callback);
      }

      put(model, callback) {
        return this.save(model, callback);
      }

      create(model, callback) {
        return this.request({
          method: 'POST',
          resource: model.resource(),
          body: model.stringify()
        }, callback);
      }

      post(model, callback) {
        return this.create(model, callback);
      }

      delete(model, callback) {
        return this.request({
          method: 'DELETE',
          resource: model.resource(),
          parameters: {
            id: model._id
          }
        }, callback);
      }

      /*
      Schema
      */
      _schema(callback) { // Use if you want the raw result of the call.
        return this.request({
          method: 'GET',
          resource: 'Schema'
        }, callback);
      }

      schema(callback) {
        return this._schema((error, result) => {
          return callback(error, result);
        });
      }

      /*
      Observers
      */
      watch(observer, observer_callback, callback) {
        return this.request({
          method: 'POST',
          resource: Observer.resource(),
          body: observer.stringify()
        }, (error, result) => {
          if (error) {
            return callback(error, null);
          } else {
            observer = new Observer(result);
            this.signalr.subscribe(this.options.signalr_hub, 'Subscribe', observer.id(), observer.Subject, observer_callback, function(error, result) {
              return callback(null, observer);
            });
            return observer;
          }
        });
      }

      ignore(observer, observer_callback, callback) {
        if (!observer) {
          callback("Observer required.");
        }
        if ((observer['subject'] != null)) {
          if (observer.parent === null) {
            return this.signalr.unsubscribe(this.options.signalr_hub, 'Unsubscribe', observer.id(), observer.subject.id(), observer_callback, callback);
          } else {
            return this.signalr.unsubscribe(this.options.signalr_hub, 'Unsubscribe', observer.id(), observer.subject.model(), observer_callback, callback);
          }
        } else {
          if (observer.parent === null) {
            return this.signalr.unsubscribe(this.options.signalr_hub, 'Unsubscribe', observer.id(), observer.SubjectId, observer_callback, callback);
          } else {
            return this.signalr.unsubscribe(this.options.signalr_hub, 'Unsubscribe', observer.id(), observer.Subject, observer_callback, callback);
          }
        }
      }

      observe(subject, parent = null, observer_callback, callback) {
        var observer;
        // subject is { model: type, _id: id }
        if (parent === null) {
          observer = new Observer({
            ObserverType: "Generic",
            Status: "Approved",
            Name: "Test" + Math.random(),
            Subject: subject.model(),
            SubjectId: subject.id(),
            "Transports": "SignalR"
          });
          return this.request({
            method: 'PUT',
            resource: Observer.resource(),
            body: observer.stringify()
          }, (error, result) => {
            if (error) {
              return callback(error, null);
            } else {
              observer = new Observer(result);
              return this.signalr.subscribe(this.options.signalr_hub, 'Subscribe', observer.id(), observer.SubjectId, observer_callback, function(error, result) {
                return callback(null, observer);
              });
            }
          });
        } else {
          observer = new Observer({
            ObserverType: "Generic",
            Status: "Approved",
            Name: "Test" + Math.random(),
            Subject: subject.model(),
            Parent: parent.model(),
            ParentId: parent.id(),
            "Transports": "SignalR"
          });
          return this.request({
            method: 'PUT',
            resource: Observer.resource(),
            body: observer.stringify()
          }, (error, result) => {
            if (error) {
              return callback(error, null);
            } else {
              observer = new Observer(result);
              return this.signalr.subscribe(this.options.signalr_hub, 'Subscribe', observer.id(), subject.model(), observer_callback, function(error, result) {
                return callback(null, observer);
              });
            }
          });
        }
      }

      unobserve(observer, subject, parent, observer_callback, callback) {
        if (!observer || (subject == null)) {
          return callback("Observer and subject required.");
        } else if (parent === null) {
          return this.signalr.unsubscribe(this.options.signalr_hub, 'Unsubscribe', observer.id(), subject.id(), observer_callback, callback);
        } else {
          return this.signalr.unsubscribe(this.options.signalr_hub, 'Unsubscribe', observer.id(), subject.model(), observer_callback, callback);
        }
      }

      /*
          Storage
      */
      store(model, key, value, callback) {
        if (!model || !model._id) {
          return callback("Storage requires an object with a valid id.");
        } else {
          return this.request({
            method: 'PUT',
            resource: model.resource(),
            id: model.id(),
            action: 'store',
            key: key,
            body: JSON.stringify(value)
          }, (error, result) => {
            if (error) {
              return callback(error, null);
            } else {
              return callback(null, result);
            }
          });
        }
      }

      storage(model, key, callback) {
        if (!model || !model._id) {
          return callback("Get of storage requires an object with a valid id.");
        } else {
          return this.request({
            method: 'GET',
            resource: model.resource(),
            id: model.id(),
            action: 'store',
            key: key
          }, (error, result) => {
            if (error) {
              return callback(error, null);
            } else {
              return callback(null, result);
            }
          });
        }
      }

      unstore(model, key, callback) {
        if (!model || !model._id) {
          return callback("Storage requires an object with a valid id.");
        } else {
          return this.request({
            method: 'DELETE',
            resource: model.resource(),
            id: model.id(),
            action: 'store',
            key: key
          }, (error, result) => {
            if (error) {
              return callback(error, null);
            } else {
              return callback(null, result);
            }
          });
        }
      }

      /*
          Token/User
      */
      isAuthorized() {
        return (this.auth_token != null) && (this.getToken() != null);
      }

      setToken(token) {
        // fix up the returned token and set _id and access_token fields to be the mojio token.
        if (token === null) {
          return this.auth_token = {
            _id: null,
            access_token: null
          };
        } else if (typeof token === 'object') { // token is an object of one of two structures
          this.auth_token = token;
          if (!this.auth_token._id && (token.access_token != null)) { // token has access_token field but not _id
            this.auth_token._id = token.access_token;
          } else if (!this.auth_token.access_token && (token._id != null)) { // token has _id but not access_token
            this.auth_token.access_token = token._id;
          }
          if ((this.auth_token.access_token == null) && (this.auth_token._id == null)) {
            this.auth_token.access_token = null;
            return this.auth_token._id = null; // token is just a string.
          }
        } else {
          if (token != null) {
            return this.auth_token = {
              _id: token,
              access_token: token
            };
          }
        }
      }

      getToken() {
        return this.auth_token.access_token;
      }

      getTokenId() {
        return this.getToken();
      }

      getRefreshToken() {
        return this.auth_token.refresh_token;
      }

      getUserId() {
        if (this.auth_token.UserId) {
          return this.auth_token.UserId;
        }
        return null;
      }

      isLoggedIn() {
        return this.getUserId() !== null || (this.getToken() != null);
      }

      getCurrentUser(callback) {
        if ((this.user != null)) {
          callback(null, this.user);
        } else if (this.isLoggedIn()) {
          this.get(Login, this.getToken(), (error, result) => {
            if (error != null) {
              return callback(error, null);
            } else if ((result.UserId != null)) {
              return this.get(User, result.UserId, (error, result) => {
                if (error != null) {
                  return callback(error, null);
                } else {
                  this.user = result;
                  return callback(null, this.user);
                }
              });
            } else {
              return callback("User not found", null);
            }
          });
        } else {
          callback("User not found", null);
          return false;
        }
        return true;
      }

    };

    defaults = {
      hostname: 'api.moj.io',
      authUrl: 'accounts.moj.io',
      port: '443',
      version: 'v2',
      scheme: 'https',
      signalr_scheme: 'http',
      signalr_port: '80',
      signalr_hub: 'ObserverHub',
      live: true
    };

    /*
    Authorize and Login
    */
    MojioClient.prototype.login_resource = 'Login';

    MojioClient.prototype.auth_response_type = 'token';

    mojio_models = {}; // this is so model can use a string to constuct the model.

    App = require('../models/App');

    mojio_models['App'] = App;

    Login = require('../models/Login');

    mojio_models['Login'] = Login;

    Mojio = require('../models/Mojio');

    mojio_models['Mojio'] = Mojio;

    Trip = require('../models/Trip');

    mojio_models['Trip'] = Trip;

    User = require('../models/User');

    mojio_models['User'] = User;

    Vehicle = require('../models/Vehicle');

    mojio_models['Vehicle'] = Vehicle;

    Product = require('../models/Product');

    mojio_models['Product'] = Product;

    Subscription = require('../models/Subscription');

    mojio_models['Subscription'] = Subscription;

    Event = require('../models/Event');

    mojio_models['Event'] = Event;

    Observer = require('../models/Observer');

    mojio_models['Observer'] = Observer;

    return MojioClient;

  })();

}).call(this);
