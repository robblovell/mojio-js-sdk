{
  "version": 3,
  "file": "NodeAuthSDK_code_test.js",
  "sourceRoot": "",
  "sources": [
    "NodeAuthSDK_code_test.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,oBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA;;EAAA,MAAA,GAAS,OAAA,CAAQ,QAAR;;EACT,QAAA,GAAW,OAAA,CAAQ,+BAAR;;EACX,YAAA,GAAe,OAAA,CAAQ,mCAAR;;EACf,iBAAA,GAAoB,OAAA,CAAQ,2CAAR;;EACpB,kBAAA,GAAqB,OAAA,CAAQ,4CAAR;;EACrB,oBAAA,GAAuB,OAAA,CAAQ,8CAAR;;EACvB,cAAA,GAAiB,OAAA,CAAQ,wCAAR;;EACjB,IAAA,GAAO,OAAA,CAAQ,MAAR;;EACP,KAAA,GAAQ,OAAA,CAAQ,kBAAR;;EACR,OAAA,GAAU,OAAA,CAAQ,kBAAR;;EAEV,QAAA,CAAS,wCAAT,EAAmD,QAAA,CAAA,CAAA;AAE/C,QAAA,aAAA,EAAA,IAAA,EAAA,YAAA,EAAA,OAAA,EAAA,SAAA,EAAA,eAAA,EAAA;IAAA,IAAA,GAAO;IACP,OAAA,GAAU;IACV,YAAA,GAAe;IACf,aAAA,GAAgB;MACZ,SAAA,EAAW,sCADC;MAEZ,aAAA,EAAe,sCAFH;MAGZ,YAAA,EAAc,gCAHF;MAIZ,QAAA,EAAU,SAJE;MAKZ,QAAA,EAAU,UALE;MAMZ,UAAA,EAAY;IANA;IAQhB,OAAA,GAAU;MACN,GAAA,EAAK,YADC;MAEN,WAAA,EAAa,SAFP;MAGN,WAAA,EAAa,iBAHP;MAIN,MAAA,EAAQ,YAJF;MAKN,OAAA,EAAS,aALH;MAMN,SAAA,EAAW,aAAa,CAAC,SANnB;MAON,aAAA,EAAe,aAAa,CAAC,aAPvB;MAQN,MAAA,EAAQ,CAAC,iBAAD;IARF;IAWV,SAAA,GAAY,QAAA,CAAA,CAAA;MACR,IAAG,CAAC,oCAAD,CAAH;QACI,OAAA,GAAU;AACV,eAAO;UAAC,IAAA,EAAM,QAAA,CAAA,CAAA,EAAA;QAAP,EAFX;OAAA,MAAA;QAII,IAAA,GAAO,IAAA,CAAK,iCAAL,CACH,CAAC,IADE,CACG,eADH,EACoB,aADpB,CAEH,CAAC,KAFE,CAEI,QAAA,CAAC,GAAD,EAAM,WAAN,EAAmB,EAAnB,CAAA;iBACH,EAAA,CAAG,IAAH,EAAS;YAAC,GAAD;YAAM;cAAE,EAAA,EAAI;YAAN,CAAN;WAAT;QADG,CAFJ;AAIP,eAAO,KARX;;IADQ;IAWZ,eAAA,GAAkB,QAAA,CAAC,KAAD,EAAQ,MAAR,CAAA;MACd,CAAC,KAAA,KAAO,IAAR,CAAa,CAAC,MAAM,CAAC,EAAE,CAAC;aACxB,CAAC,MAAA,KAAQ,IAAT,CAAc,CAAC,MAAM,CAAC,EAAE,CAAC;IAFX;IAIlB,EAAA,CAAG,kDAAH,EAAuD,QAAA,CAAC,IAAD,CAAA;AAEnD,UAAA,GAAA;;MAAA,IAAA,GAAO,SAAA,CAAA;MAEP,GAAA,GAAM,IAAI,QAAJ,CAAa,OAAb;aAEN,GACA,CAAC,KADD,CACO,YADP,CAEA,CAAC,WAFD,CAEa,SAFb,EAEwB,UAFxB,CAGA,CAAC,QAHD,CAII,QAAA,CAAC,KAAD,EAAQ,MAAR,CAAA;QACI,eAAA,CAAgB,KAAhB,EAAuB,MAAvB;QACA,IAAe,YAAf;UAAA,IAAI,CAAC,IAAL,CAAA,EAAA;;eACA,IAAA,CAAA;MAHJ,CAJJ;IANmD,CAAvD;WAgBA,EAAA,CAAG,4BAAH,EAAiC,QAAA,CAAA,CAAA;AAE7B,UAAA,OAAA,EAAA,GAAA;;MAAA,IAAA,GAAO,SAAA,CAAA;MACP,GAAA,GAAM,IAAI,QAAJ,CAAa,OAAb;MAEN,OAAA,GAAU,GACV,CAAC,KADS,CACH,YADG,CAEV,CAAC,WAFS,CAEG,SAFH,EAEc,UAFd,CAGV,CAAC,OAHS,CAAA;aAKV,OACA,CAAC,IADD,CAEI,QAAA,CAAC,MAAD,CAAA;QACI,eAAA,CAAgB,IAAhB,EAAsB,MAAtB;QACA,IAAe,YAAf;iBAAA,IAAI,CAAC,IAAL,CAAA,EAAA;SAFJ;;MAAA,CAFJ,EAOI,QAAA,CAAC,KAAD,CAAA;QACI,OAAO,CAAC,GAAR,CAAY,EAAZ;QACA,OAAO,CAAC,GAAR,CAAY,sBAAA,GAAuB,KAAnC;eACA,OAAO,CAAC,IAAR,CAAa,CAAb;MAHJ,CAPJ;IAV6B,CAAjC;EAvD+C,CAAnD;;EAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "should = require('should')\nMojioSDK = require '../../src/nodejs/sdk/MojioSDK'\nMojioAuthSDK = require '../../src/nodejs/sdk/MojioAuthSDK'\nMojioPromiseStyle = require '../../src/nodejs/styles/MojioPromiseStyle'\nMojioReactiveStyle = require '../../src/nodejs/styles/MojioReactiveStyle'\nMojioAsyncAwaitStyle = require '../../src/nodejs/styles/MojioAsyncAwaitStyle'\nMojioSyncStyle = require '../../src/nodejs/styles/MojioSyncStyle'\nnock = require 'nock'\nasync = require('asyncawait/async')\nawaitIt = require('asyncawait/await')\n\ndescribe 'Node Mojio Auth SDK password type auth', ->\n\n    call = null\n    timeout = 5000\n    callback_url = \"http://localhost:3000/callback\"\n    authorization = {\n        client_id: 'cacc0d94-b6b4-4da7-9983-3991de197038',\n        client_secret: '427d5794-5021-4274-a6e8-a38d5d83bf99'\n        redirect_uri: 'http://localhost:3000/callback'\n        username: 'testing'\n        password: 'Test123!',\n        grant_type: 'password',\n    }\n    options = {\n        sdk: MojioAuthSDK,\n        environment: 'staging'\n        accountsURL: 'accounts.moj.io'\n        apiURL: 'api.moj.io'\n        pushURL: 'push.moj.io'\n        client_id: authorization.client_id,\n        client_secret: authorization.client_secret,\n        styles: [MojioPromiseStyle]\n    }\n\n    setupNock = () ->\n        if (process.env.FUNCTIONAL_TESTS?)\n            timeout = 3000\n            return {done: () ->}\n        else\n            call = nock('https://staging-accounts.moj.io')\n                .post(\"/oauth2/token\", authorization)\n                .reply((uri, requestBody, cb) ->\n                    cb(null, [200, { id: 1}]))\n            return call\n\n    testErrorResult = (error, result) ->\n        (error==null).should.be.true\n        (result!=null).should.be.true\n\n    it 'can authorize with password flow, callback async', (done) ->\n#        @.timeout(timeout)\n        call = setupNock()\n\n        sdk = new MojioSDK(options)\n\n        sdk\n        .token(callback_url)\n        .credentials('testing', 'Test123!')\n        .callback(\n            (error, result) ->\n                testErrorResult(error, result)\n                call.done() if call?\n                done()\n        )\n\n    it 'can authorize with promise', () ->\n#        @.timeout(timeout)\n        call = setupNock()\n        sdk = new MojioSDK(options)\n\n        promise = sdk\n        .token(callback_url)\n        .credentials('testing', 'Test123!')\n        .promise()\n\n        promise\n        .then(\n            (result) ->\n                testErrorResult(null, result)\n                call.done() if call?\n#                done()\n            ,\n            (error) ->\n                console.log(\"\")\n                console.log(\"Error with promise: \"+error)\n                process.exit(1)\n\n        )\n\n#\n#    it 'can authorize with reactive observable.', (done) ->\n#        @.timeout(timeout)\n#        Rx = require('rx')\n#\n#        sdk = new MojioSDK({sdk: MojioAuthSDK, styles: [MojioReactiveStyle], test: true})\n#\n#        observable = sdk\n#        .authorize(authorization)\n#        .observable()\n#        observer = Rx.Observer.create(\n#            (result) -> console.log(\"Result:#{JSON.stringify(result)}\")\n#        ,\n#            (error) -> console.log(\"Error:#{JSON.stringify(error)}\")\n#        ,\n#            () ->\n#                console.log(\"Done.\")\n#                call.done() if call?\n#                done()\n#        )\n#        observable.subscribe(observer)\n#\n#    it 'can authorize with reactive subscribe', (done) ->\n#        @.timeout(timeout)\n#\n#        sdk = new MojioSDK({sdk: MojioAuthSDK, styles: [MojioReactiveStyle], test: true})\n#        sdk\n#        .authorize(authorization)\n#        .subscribe(\n#            (result) -> console.log(\"Result:#{JSON.stringify(result)}\")\n#        ,\n#            (error) -> console.log(\"Error:#{JSON.stringify(error)}\")\n#        ,\n#            () ->\n#                console.log(\"Done.\")\n#                call.done() if call?\n#                done()\n#        )\n#\n#    it 'can authorize with async call', (done) ->\n#        @.timeout(timeout)\n#\n#        sdk = new MojioSDK({sdk: MojioAuthSDK, styles: [MojioAsyncAwaitStyle], test: true})\n#        sdk\n#        .authorize(authorization)\n#        .async()\n#        .then(\n#            (result) ->\n#                console.log('Async promise Result: ' + result)\n#                console.log(\"\")\n#                call.done() if call?\n#                done()\n#            ,\n#            (error) ->\n#                console.log(\"Error:#{JSON.stringify(error)}\")\n#                done()\n#        )\n#        .catch((err) ->\n#            console.log('Something went wrong: ' + err)\n#        )\n#\n#    it 'can authorize with synchronous call', (done) ->\n#        @.timeout(timeout)\n#\n#        sdk = new MojioSDK({sdk: MojioAuthSDK, styles: [MojioSyncStyle], test: true})\n#\n#        result = sdk\n#        .authorize(authorization)\n#        .sync()\n#        call.done() if call?\n#        console.log(JSON.stringify(result))\n#        done()\n"
  ]
}